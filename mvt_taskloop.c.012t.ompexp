
;; Function init_array (init_array, funcdef_no=2, decl_uid=4727, cgraph_uid=2, symbol_order=4)

init_array (int n, double * x1, double * x2, double * y_1, double * y_2, double[8000] * A)
{
  int j;
  int i;
  double D.4813;
  double D.4812;
  double D.4811;
  double D.4810;
  double[8000] * D.4809;
  long unsigned int D.4808;
  long unsigned int D.4807;
  double D.4806;
  double D.4805;
  double D.4804;
  double D.4803;
  double * D.4802;
  long unsigned int D.4801;
  long unsigned int D.4800;
  double D.4799;
  double D.4798;
  double D.4797;
  double D.4796;
  double * D.4795;
  long unsigned int D.4794;
  long unsigned int D.4793;
  double D.4792;
  double D.4791;
  double D.4790;
  double D.4789;
  double * D.4788;
  long unsigned int D.4787;
  long unsigned int D.4786;
  double D.4785;
  double D.4784;
  double D.4783;
  double * D.4782;
  long unsigned int D.4781;
  long unsigned int D.4780;

  <bb 2>:
  i = 0;
  goto <bb 7>;

  <bb 3>:
  D.4780 = (long unsigned int) i;
  D.4781 = D.4780 * 8;
  D.4782 = x1 + D.4781;
  D.4783 = (double) i;
  D.4784 = (double) n;
  D.4785 = D.4783 / D.4784;
  *D.4782 = D.4785;
  D.4786 = (long unsigned int) i;
  D.4787 = D.4786 * 8;
  D.4788 = x2 + D.4787;
  D.4789 = (double) i;
  D.4790 = D.4789 + 1.0e+0;
  D.4791 = (double) n;
  D.4792 = D.4790 / D.4791;
  *D.4788 = D.4792;
  D.4793 = (long unsigned int) i;
  D.4794 = D.4793 * 8;
  D.4795 = y_1 + D.4794;
  D.4796 = (double) i;
  D.4797 = D.4796 + 3.0e+0;
  D.4798 = (double) n;
  D.4799 = D.4797 / D.4798;
  *D.4795 = D.4799;
  D.4800 = (long unsigned int) i;
  D.4801 = D.4800 * 8;
  D.4802 = y_2 + D.4801;
  D.4803 = (double) i;
  D.4804 = D.4803 + 4.0e+0;
  D.4805 = (double) n;
  D.4806 = D.4804 / D.4805;
  *D.4802 = D.4806;
  j = 0;
  goto <bb 5>;

  <bb 4>:
  D.4807 = (long unsigned int) i;
  D.4808 = D.4807 * 64000;
  D.4809 = A + D.4808;
  D.4810 = (double) i;
  D.4811 = (double) j;
  D.4812 = D.4810 * D.4811;
  D.4813 = D.4812 / 8.0e+3;
  *D.4809[j] = D.4813;
  j = j + 1;

  <bb 5>:
  if (j < n)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  i = i + 1;

  <bb 7>:
  if (i < n)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 8>:
  return;

}



;; Function print_array (print_array, funcdef_no=3, decl_uid=4740, cgraph_uid=3, symbol_order=5)

print_array (int n, double * x1, double * x2)
{
  int i;
  struct _IO_FILE * stderr.2;
  int D.4824;
  struct _IO_FILE * stderr.1;
  double D.4822;
  double * D.4821;
  long unsigned int D.4820;
  long unsigned int D.4819;
  struct _IO_FILE * stderr.0;
  double D.4817;
  double * D.4816;
  long unsigned int D.4815;
  long unsigned int D.4814;

  <bb 2>:
  i = 0;
  goto <bb 6>;

  <bb 3>:
  D.4814 = (long unsigned int) i;
  D.4815 = D.4814 * 8;
  D.4816 = x1 + D.4815;
  D.4817 = *D.4816;
  stderr.0 = stderr;
  fprintf (stderr.0, "%0.2lf ", D.4817);
  D.4819 = (long unsigned int) i;
  D.4820 = D.4819 * 8;
  D.4821 = x2 + D.4820;
  D.4822 = *D.4821;
  stderr.1 = stderr;
  fprintf (stderr.1, "%0.2lf ", D.4822);
  D.4824 = i % 20;
  if (D.4824 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  stderr.2 = stderr;
  __builtin_fputc (10, stderr.2);

  <bb 5>:
  i = i + 1;

  <bb 6>:
  if (i < n)
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 7>:
  return;

}



;; Function kernel_mvt (kernel_mvt, funcdef_no=4, decl_uid=4752, cgraph_uid=4, symbol_order=6)


OMP region tree

bb 2: gimple_omp_parallel
    bb 12: gimple_omp_single
    bb 20: GIMPLE_OMP_RETURN
    bb 3: gimple_omp_single
    bb 11: GIMPLE_OMP_RETURN
bb 21: GIMPLE_OMP_RETURN

Introduced new external node (__builtin_GOMP_single_start/12).
Introduced new external node (__builtin_GOMP_barrier/13).
Merging blocks 2 and 24
Merging blocks 2 and 22
kernel_mvt (int n, double * x1, double * x2, double * y_1, double * y_2, double[8000] * A)
{
  unsigned int threads.8;
  _Bool D.4925;
  _Bool D.4910;
  int j;
  int i;
  int threads.3;
  struct .omp_data_s.4 .omp_data_o.7;
  int D.4921;
  int D.4922;
  int D.4919;
  int D.4920;
  int D.4918;
  double * D.4917;
  int D.4916;
  double[8000] * D.4915;
  double * D.4914;
  int D.4913;
  double * D.4912;
  int D.4911;
  int D.4906;
  int D.4907;
  int D.4904;
  int D.4905;
  int D.4903;
  double * D.4902;
  double[8000] * D.4901;
  int D.4900;
  double * D.4899;
  int D.4898;
  double * D.4897;
  int D.4896;

  <bb 2>:
  threads.3 = threads;
  .omp_data_o.7.x1 = x1;
  .omp_data_o.7.x2 = x2;
  .omp_data_o.7.y_1 = y_1;
  .omp_data_o.7.y_2 = y_2;
  .omp_data_o.7.A = A;
  .omp_data_o.7.n = n;
  .omp_data_o.7.i = i;
  threads.8 = (unsigned int) threads.3;
  __builtin_GOMP_parallel (kernel_mvt._omp_fn.0, &.omp_data_o.7, threads.8, 0);
  x1 = .omp_data_o.7.x1;
  x2 = .omp_data_o.7.x2;
  y_1 = .omp_data_o.7.y_1;
  y_2 = .omp_data_o.7.y_2;
  A = .omp_data_o.7.A;
  n = .omp_data_o.7.n;
  i = .omp_data_o.7.i;
  .omp_data_o.7 = {CLOBBER};
  return;

}



;; Function main (main, funcdef_no=5, decl_uid=4770, cgraph_uid=5, symbol_order=7)

main (int argc, char * * argv)
{
  int valor;
  double[8000] * y_2;
  double[8000] * y_1;
  double[8000] * x2;
  double[8000] * x1;
  double[8000][8000] * A;
  int n;
  int D.5011;
  unsigned char D.5008;
  char * D.5007;
  int tasks.11;
  int threads.10;
  int threads.9;
  char * D.4999;
  char * * D.4998;

  <bb 2>:
  if (argc > 1)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  D.4998 = argv + 8;
  D.4999 = *D.4998;
  valor = atoi (D.4999);
  threads = valor;
  threads.9 = threads;
  if (threads.9 > 1)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  threads.10 = threads;
  tasks.11 = threads.10 / 2;
  tasks = tasks.11;

  <bb 5>:
  n = 8000;
  A = polybench_alloc_data (64000000, 8);
  x1 = polybench_alloc_data (8000, 8);
  x2 = polybench_alloc_data (8000, 8);
  y_1 = polybench_alloc_data (8000, 8);
  y_2 = polybench_alloc_data (8000, 8);
  init_array (n, x1, x2, y_1, y_2, A);
  polybench_timer_start ();
  kernel_mvt (n, x1, x2, y_1, y_2, A);
  polybench_timer_stop ();
  polybench_timer_print ();
  if (argc > 42)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 6>:
  D.5007 = *argv;
  D.5008 = MEM[(const unsigned char * {ref-all})D.5007];
  if (D.5008 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  print_array (n, x1, x2);

  <bb 8>:
  free (A);
  free (x1);
  free (x2);
  free (y_1);
  free (y_2);
  D.5011 = 0;

<L8>:
  return D.5011;

}


